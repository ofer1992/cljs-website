{"version":3,"sources":["threeagent/impl/entities.cljs"],"mappings":"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","names":["js/threeagent","js/threeagent.impl","js/threeagent.impl.entities","js/threeagent.impl.entities.material-cache","threeagent.impl.entities/material-cache","cljs.core/memoize","threeagent.impl.threejs/mesh-phong-material","threeagent.impl.entities/->material","config","js/module$node_modules$three$build$three_cjs.Material","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","threeagent.impl.entities/MeshEntity","threeagent.impl.entities/->MeshEntity","geo-fn","_","geo","mat","mesh","js/module$node_modules$three$build$three_cjs.Mesh","threeagent.impl.entities/default-light-shadow","threeagent.impl.entities/apply-shadow-settings!","light","shadow-cfg","shadow","camera-obj","map-size","cljs.core.merge","camera","or__5045__auto__","threeagent.impl.entities/LightEntity","threeagent.impl.entities/->LightEntity","create-fn","update-fn","cfg","obj","threeagent.impl.entities/apply-props-clj!","properties","seq__11613","cljs.core/seq","chunk__11614","count__11615","i__11616","vec__11628","cljs.core.nth","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__11633","cljs.core/first","cljs.core/next","k","v","threeagent.impl.entities.goog$module$goog$object.set","cljs.core/name","threeagent.impl.entities/builtin-entity-types","threeagent.impl.entities/t_threeagent$impl$entities11778","js/module$node_modules$three$build$three_cjs.Object3D","threeagent.impl.entities/t_threeagent$impl$entities11662","js/module$node_modules$three$build$three_cjs.Group","threeagent.impl.entities/t_threeagent$impl$entities11676","object","threeagent.impl.entities/t_threeagent$impl$entities11685","cam","js/module$node_modules$three$build$three_cjs.PerspectiveCamera","o","threeagent.impl.entities/t_threeagent$impl$entities11801","js/module$node_modules$three$build$three_cjs.OrthographicCamera","p__11692","map__11693","cljs.core/--destructure-map","cljs.core.get","width","height","width-segments","height-segments","js/module$node_modules$three$build$three_cjs.PlaneGeometry","p__11705","map__11707","depth","depth-segments","js/module$node_modules$three$build$three_cjs.BoxGeometry","p__11642","map__11643","radius","phi-start","phi-length","theta-start","theta-length","js/module$node_modules$three$build$three_cjs.SphereGeometry","threeagent.impl.util/pi-times-2","threeagent.impl.util/pi","p__11758","map__11762","radius-top","radius-bottom","radial-segments","open-ended?","js/module$node_modules$three$build$three_cjs.CylinderGeometry","p__11708","map__11709","segments","js/module$node_modules$three$build$three_cjs.CircleGeometry","p__11771","map__11775","js/module$node_modules$three$build$three_cjs.ConeGeometry","p__11796","map__11797","detail","js/module$node_modules$three$build$three_cjs.DodecahedronGeometry","p__11776","map__11777","js/module$node_modules$three$build$three_cjs.Icosahedron","p__11713","map__11714","js/module$node_modules$three$build$three_cjs.Octahedron","p__11794","map__11795","js/module$node_modules$three$build$three_cjs.TetrahedronGeometry","p__11669","map__11670","inner-radius","outer-radius","theta-segments","phi-segments","js/module$node_modules$three$build$three_cjs.RingGeometry","p__11740","map__11742","tube","tubular-segments","arc","js/module$node_modules$three$build$three_cjs.TorusGeometry","p__11697","map__11699","p","q","js/module$node_modules$three$build$three_cjs.TorusKnotGeometry","p__11768","map__11769","shape","js/module$node_modules$three$build$three_cjs.ShapeGeometry","p__11751","map__11752","intensity","color","js/module$node_modules$three$build$three_cjs.AmbientLight","p__11646","map__11648","distance","decay","js/module$node_modules$three$build$three_cjs.PointLight","p__11667","map__11668","sky-color","ground-color","js/module$node_modules$three$build$three_cjs.HemisphereLight","clojure.set/rename-keys","p__11654","map__11655","target","js/module$node_modules$three$build$three_cjs.DirectionalLight","p__11660","map__11661","cljs.core.dissoc","p__11730","map__11731","js/module$node_modules$three$build$three_cjs.RectAreaLight","p__11719","map__11720","angle","penumbra","js/module$node_modules$three$build$three_cjs.SpotLight","threeagent.impl.util/pi-over-2","p__11723","map__11724"],"sourcesContent":["(ns threeagent.impl.entities\n  \"Defines all of the built-in IEntityType types.\n  This namespace is meant for internal use only, these functions are subject to change.\"\n  (:require [threeagent.entity :refer [IEntityType IUpdateableEntityType]]\n            [threeagent.impl.threejs :as threejs]\n            [threeagent.impl.util :refer [pi pi-times-2 pi-over-2]]\n            [\"three\" :as three]\n            [clojure.set :refer [rename-keys]]\n            [goog.object :as gobject]))\n            \n\n(defonce ^:private material-cache (memoize threejs/mesh-phong-material))\n\n(defn- ->material [config]\n  (if (instance? three/Material config)\n    config\n    (material-cache config)))\n\n(deftype MeshEntity [geo-fn]\n  IEntityType\n  (create [_ _ config]\n    (let [geo (geo-fn config)\n          mat (->material (:material config))\n          mesh (three/Mesh. geo mat)]\n      (set! (.-castShadow mesh) (:cast-shadow config))\n      (set! (.-receiveShadow mesh) (:receive-shadow config))\n      mesh))\n  (destroy! [_ _ _ _])\n  IUpdateableEntityType\n  (update! [_ _ ^three/Mesh mesh config]\n    (let [geo (geo-fn config)\n          mat (->material (:material config))]\n      (set! (.-geometry mesh) geo)\n      (set! (.-material mesh) mat)\n      (set! (.-castShadow mesh) (:cast-shadow config))\n      (set! (.-receiveShadow mesh) (:receive-shadow config))\n      mesh)))\n\n(def ^:private default-light-shadow {:map-size {:width 512\n                                                :height 512}\n                                     :focus 1.0\n                                     :camera {:near 0.5\n                                              :far 500\n                                              :left -5\n                                              :right 5\n                                              :top 5\n                                              :bottom -5}})\n\n(defn- apply-shadow-settings! [light shadow-cfg]\n  (when shadow-cfg\n    (let [shadow (.-shadow light)\n          camera-obj (.-camera shadow)\n          map-size (merge (:map-size default-light-shadow)\n                          (:map-size shadow-cfg))\n          camera (merge (:camera default-light-shadow)\n                        (:camera shadow-cfg))]\n      (set! (.-width (.-mapSize shadow)) (:width map-size))\n      (set! (.-height (.-mapSize shadow)) (:height map-size))\n      (set! (.-near camera-obj) (:near camera))\n      (set! (.-far camera-obj) (:far camera))\n      (set! (.-left camera-obj) (:left camera))\n      (set! (.-right camera-obj) (:right camera))\n      (set! (.-top camera-obj) (:top camera))\n      (set! (.-bottom camera-obj) (:bottom camera))\n      (set! (.-focus shadow) (or (:focus shadow-cfg)\n                                 (:focus default-light-shadow)))\n      (.updateProjectionMatrix camera-obj)))\n  light)\n\n(deftype LightEntity [create-fn update-fn]\n  IEntityType\n  (create [_ _ cfg]\n    (let [light (create-fn cfg)]\n      (set! (.-castShadow light) (:cast-shadow cfg))\n      (set! (.-receiveShadow light) (:receive-shadow cfg))\n      (apply-shadow-settings! light (:shadow cfg))))\n  (destroy! [_ _ _ _])\n  IUpdateableEntityType\n  (update! [_ _ ^three/Light obj cfg]\n    (update-fn obj cfg)\n    (set! (.-castShadow obj) (:cast-shadow cfg))\n    (set! (.-receiveShadow obj) (:receive-shadow cfg))\n    (apply-shadow-settings! obj (:shadow cfg))))\n\n(defn- apply-props-clj! [^js obj properties]\n  (doseq [[k v] properties]\n    (gobject/set obj (name k) v))\n  obj)\n\n(def builtin-entity-types\n  {;; Common\n   :object (reify IEntityType\n             (create [_ _ _] (three/Object3D.))\n             (destroy! [_ _ _ _])\n             IUpdateableEntityType\n             (update! [_ _ obj _] obj))\n   :group (reify IEntityType\n            (create [_ _ _] (three/Group.))\n            (destroy! [_ _ _ _])\n            IUpdateableEntityType\n            (update! [_ _ obj _] obj))\n   :instance (reify IEntityType\n               (create [_ _ {:keys [object]}]\n                 object)\n               (destroy! [_ _ _ _]))\n\n   ;; Cameras\n   :perspective-camera (reify IEntityType\n                         (create [_ _ cfg]\n                           (let [cam (three/PerspectiveCamera. 75.0 1.0 0.1 2000.0)]\n                             (set! (.-active cam) true)\n                             (apply-props-clj! cam cfg)\n                             (.updateProjectionMatrix cam)\n                             cam))\n                         (destroy! [_ _ _ _])\n                         IUpdateableEntityType\n                         (update! [_ _ ^three/PerspectiveCamera o cfg]\n                           (apply-props-clj! o cfg)\n                           (.updateProjectionMatrix o)\n                           o))\n   :orthographic-camera (reify IEntityType\n                          (create [_ _ cfg]\n                            (let [cam (three/OrthographicCamera. -1 1 1 -1 0.1 2000.0)]\n                              (set! (.-active cam) true)\n                              (apply-props-clj! cam cfg)\n                              (.updateProjectionMatrix cam)\n                              cam))\n                          (destroy! [_ _ _ _])\n                          IUpdateableEntityType\n                          (update! [_ _ ^three/OrthographicCamera o cfg]\n                            (apply-props-clj! o cfg)\n                            (.updateProjectionMatrix o)\n                            o))\n   ;; Primitives\n   :plane (->MeshEntity (fn [{:keys [width height width-segments height-segments]}]\n                          (three/PlaneGeometry. (or width 1)\n                                                (or height 1)\n                                                (or width-segments 1)\n                                                (or height-segments 1))))\n   :box (->MeshEntity (fn [{:keys [width height depth width-segments height-segments depth-segments]}]\n                        (three/BoxGeometry. (or width 1)\n                                            (or height 1)\n                                            (or depth 1)\n                                            (or width-segments 1)\n                                            (or height-segments 1)\n                                            (or depth-segments 1))))\n   :sphere (->MeshEntity (fn [{:keys [radius width-segments height-segments phi-start\n                                      phi-length theta-start theta-length]}]\n                           (three/SphereGeometry. (or radius 1)\n                                                  (or width-segments 8)\n                                                  (or height-segments 6)\n                                                  (or phi-start 0)\n                                                  (or phi-length pi-times-2)\n                                                  (or theta-start 0)\n                                                  (or theta-length pi))))\n   :cylinder (->MeshEntity (fn [{:keys [radius-top radius-bottom height radial-segments\n                                        height-segments open-ended? theta-start theta-length]}]\n                             (three/CylinderGeometry. (or radius-top 1)\n                                                      (or radius-bottom 1)\n                                                      (or height 1)\n                                                      (or radial-segments 8)\n                                                      (or height-segments 1)\n                                                      open-ended?\n                                                      (or theta-start 0)\n                                                      (or theta-length pi-times-2))))\n   :circle (->MeshEntity (fn [{:keys [radius segments theta-start theta-length]}]\n                           (three/CircleGeometry. (or radius 1)\n                                                  (or segments 8)\n                                                  (or theta-start 0)\n                                                  (or theta-length pi-times-2))))\n   :cone (->MeshEntity (fn [{:keys [radius height radial-segments height-segments open-ended?\n                                    theta-start theta-length]}]\n                         (three/ConeGeometry. (or radius 1)\n                                              (or height 1)\n                                              (or radial-segments 8)\n                                              (or height-segments 1)\n                                              open-ended?\n                                              (or theta-start 0)\n                                              (or theta-length pi-times-2))))\n   :dodecahedron (->MeshEntity (fn [{:keys [radius detail]}]\n                                 (three/DodecahedronGeometry. (or radius 1)\n                                                              (or detail 0))))\n   :icosahedron (->MeshEntity (fn [{:keys [radius detail]}]\n                                (three/Icosahedron. (or radius 1)\n                                                    (or detail 0))))\n   :octahedron (->MeshEntity (fn [{:keys [radius detail]}]\n                               (three/Octahedron. (or radius 1)\n                                                  (or detail 0))))\n   :tetrahedron (->MeshEntity (fn [{:keys [radius detail]}]\n                                (three/TetrahedronGeometry. (or radius 1)\n                                                            (or detail 0))))\n   :ring (->MeshEntity (fn [{:keys [inner-radius outer-radius theta-segments phi-segments\n                                    theta-start theta-length]}]\n                         (three/RingGeometry. (or inner-radius 0.5)\n                                              (or outer-radius 1.0)\n                                              (or theta-segments 8)\n                                              (or phi-segments 8)\n                                              (or theta-start 0)\n                                              (or theta-length pi-times-2))))\n   :torus (->MeshEntity (fn [{:keys [radius tube radial-segments tubular-segments arc]}]\n                          (three/TorusGeometry. (or radius 1)\n                                                (or tube 0.4)\n                                                (or radial-segments 8)\n                                                (or tubular-segments 6)\n                                                (or arc pi-times-2))))\n   :torus-knot (->MeshEntity (fn [{:keys [radius tube tubular-segments radial-segments p q]}]\n                               (three/TorusKnotGeometry. (or radius 1)\n                                                         (or tube 0.4)\n                                                         (or tubular-segments 64)\n                                                         (or radial-segments 8)\n                                                         (or p 2)\n                                                         (or q 3))))\n   :shape (->MeshEntity (fn [{:keys [shape]}]\n                          (three/ShapeGeometry. shape)))\n   ;; Lights\n   :ambient-light (->LightEntity\n                   (fn [{:keys [intensity color]}]\n                     (three/AmbientLight. (or color 0xFFFFFF)\n                                          (or intensity 1.0)))\n                   (fn [^three/Light o cfg]\n                     (apply-props-clj! o cfg)\n                     o))\n   :point-light (->LightEntity\n                 (fn [{:keys [intensity color distance decay]}]\n                   (three/PointLight. (or color 0xFFFFFF)\n                                      (or intensity 1.0)\n                                      (or distance 0)\n                                      (or decay 1.0)))\n                 (fn [^three/Light o cfg]\n                   (apply-props-clj! o cfg)\n                   o))\n   :hemisphere-light (->LightEntity\n                      (fn [{:keys [sky-color ground-color intensity]}]\n                        (three/HemisphereLight.\n                         (or sky-color 0xFFFFFF)\n                         (or ground-color 0xFFFFFF)\n                         (or intensity 1)))\n                      (fn [^three/Light o cfg]\n                        (apply-props-clj! o (rename-keys cfg {:sky-color :skyColor\n                                                              :ground-color :groundColor}))\n                        o))\n   :directional-light (->LightEntity\n                       (fn [{:keys [intensity color target]}]\n                         (let [light (three/DirectionalLight. (or color 0xFFFFFF)\n                                                              (or intensity 1.0))]\n                           (set! (.-originalTarget light) (.-target light))\n                           (when target\n                             (set! (.-target light) target))\n                           light))\n                       (fn [^three/Light o {:keys [target] :as cfg}]\n                         (if target\n                           (set! (.-target o) target)\n                           (set! (.-target o) (.-originalTarget o)))\n                         (apply-props-clj! o (dissoc cfg :target))\n                         o))\n   :rect-area-light (->LightEntity\n                     (fn [{:keys [intensity color width height]}]\n                       (three/RectAreaLight. (or color 0xFFFFFF)\n                                             (or intensity 1.0)\n                                             (or width 10)\n                                             (or height 10)))\n                     (fn [^three/Light o cfg]\n                       (apply-props-clj! o cfg)\n                       o))\n   :spot-light (->LightEntity\n                (fn [{:keys [intensity color distance angle penumbra decay target]}]\n                  (let [light (three/SpotLight. (or color 0xFFFFFF)\n                                                (or intensity 1.0)\n                                                (or distance 0)\n                                                (or angle pi-over-2)\n                                                (or penumbra 0)\n                                                (or decay 1.0))]\n                    (set! (.-originalTarget light) (.-target light))\n                    (when target\n                      (set! (.-target light) target))\n                    light))\n                (fn [^three/Light o {:keys [target] :as cfg}]\n                  (if target\n                    (set! (.-target o) target)\n                    (set! (.-target o) (.-originalTarget o)))\n                  (apply-props-clj! o (dissoc cfg :target))\n                  o))})\n                                        \n                                  \n"],"x_google_ignoreList":[0]}