{"version":3,"sources":["gallery/views/json2csv.cljs"],"mappings":";AAOA,oCAAA,pCAAME,gFAAYC;AAAlB,AAAA,0FAAA,6DAAA,2CAAA,qDAAA,OAAA,sDAAA,AAAAH,uBAAA,+DAAA,WAAAC,jFAEsBE;AAFtB,AAG0B,OAACC,sBAAOD,MAAM,AAAA,AAAAF;;;AAExC,AAAKI,8BAAK,gDAAA,hDAACC;AAGX,qCAAA,rCAAMC,kFAAaC;AAAnB,AACE,wIAAA,2EAAA,5MAACC,0DAAQ,AAAQC,WAAQF;;AAC3B,oCAAA,pCAAMG,gFAAYC;AAAlB,AAAqB,yDAAA,lDAACC,sDAAa,AAACC,4CAAIC,gBAAMH;;AAC9C,oCAAA,pCAAMI,gFAAYJ;AAAlB,AAAqB,yDAAA,lDAACC,sDAAa,AAACC,4CAAIG,iBAAOL;;AAE/C;;;oCAAA,pCAAMM,gFAEHN;AAFH,AAGE,yDAAA,KAAA,vDAACC,0IAAe,AAACF,kCAAWC,GAAG,AAACI,kCAAWJ;;AAE7C,oCAAA,pCAAMO;AAAN,AAAA,0FAAA,mDAAA,mFAAA,8CAAA,sBAAA,mFAIIjB,kCAAWG,oCACZ,iBAAA,AAAA,0FAAA,8CAAA,2CAAA,uDAAA,2CAAA,mEAAA,2BACsC,AAACa,kCAAW,mCAAA,AAAAlB,nCAACO,mDAAaF;gBADhE,GAAA,CAAAe,kBAEaC;AAFb,QAAAD,JAEuBE;AAFvB,AAEyB,OAAMC,YAAWD;;AAF1C,AAAA,MAAAF","names":["cljs.core/deref","p1__18393#","gallery.views.json2csv/atom-input","value","cljs.core/reset!","gallery.views.json2csv/json","reagent.core.atom","gallery.views.json2csv/json-parser","json-str","cljs.core.js__GT_clj","js/JSON","gallery.views.json2csv/key-string","m","clojure.string.join","cljs.core.map","cljs.core/first","gallery.views.json2csv/val-string","cljs.core/second","gallery.views.json2csv/map-to-csv","gallery.views.json2csv/main-panel","e18394","js/Object","e","js/console"],"sourcesContent":[";; TODO\n;; - add support for lists as values. this then requires consistency validation.\n(ns gallery.views.json2csv\n  (:require\n   [reagent.core :as r]\n   [clojure.string :as str]))\n\n(defn atom-input [value]\n  [:textarea {:type \"text\"\n              :value @value\n              :on-change #(reset! value (-> % .-target .-value))}])\n\n(def json (r/atom \"{\\\"a\\\": 1, \\\"b\\\": 2}\"))\n\n\n(defn json-parser [json-str]\n  (js->clj (.parse js/JSON json-str) :keywordize-keys true))\n(defn key-string [m] (str/join \",\" (map first m)))\n(defn val-string [m] (str/join \",\" (map second m)))\n\n(defn map-to-csv\n  \"converts a map to a csv string\"\n  [m]\n  (str/join \"\\n\" [(key-string m) (val-string m)]))\n\n(defn main-panel []\n;;  (let [json (r/atom \"\")]\n  [:div\n   [:p \"JSON input:\"]\n   [atom-input json]\n   (try \n   [:p {:style {:white-space \"pre-line\"}}(map-to-csv (json-parser @json))]\n         (catch js/Object e (.log js/console e)))\n   ])\n"]}