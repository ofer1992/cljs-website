{"version":3,"sources":["gallery/views/flattener.cljs"],"mappings":";AAKA,qCAAA,rCAAME,kFAAYC;AAAlB,AAAA,0FAAA,6DAAA,2CAAA,qDAAA,OAAA,sDAAA,AAAAH,uBAAA,+DAAA,WAAAC,jFAEsBE;AAFtB,AAG0B,OAACC,sBAAOD,MAAM,AAAA,AAAAF;;;AAExC,8CAAA,9CAAMI,oGAAqBC;AAA3B,AACE,gCAAA,KAAA,9BAACC,uBAAYD;;AAGf,kCAAA,lCAAME;AAAN,AACE,IAAMC,OAAK,gDAAA,hDAACC;AAAZ,AACE;AAAA,AAAA,0FAAA,mDAAA,mFAAA,8CAAA,iBAAA,mIAAA,mFAAA,nIAGIR,mCAAWO,8IACR,4CAAA,AAAAT,5CAACK,4DAAqBI;;;AAEjC,qCAAA,rCAAME;AAAN,AAAA,0FACGH","names":["cljs.core/deref","p1__18991#","gallery.views.flattener/atom-input","value","cljs.core/reset!","gallery.views.flattener/replace-line-breaks","s","clojure.string/replace","gallery.views.flattener/project","text","reagent.core.atom","gallery.views.flattener/main-panel"],"sourcesContent":["(ns gallery.views.flattener\n  (:require\n   [reagent.core :as r]\n    [clojure.string :as str]))\n\n(defn atom-input [value]\n  [:textarea {:type \"text\"\n              :value @value\n              :on-change #(reset! value (-> % .-target .-value))}])\n\n(defn replace-line-breaks [s]\n  (str/replace s #\"\\n\" \" \")\n)\n\n(defn project []\n  (let [text (r/atom \"Hello, World!\")]\n    (fn []\n      [:div\n       [:p \"Text: \"] \n       [atom-input text]\n       [:p (replace-line-breaks @text)]])))\n\n(defn main-panel []\n  [project])"]}