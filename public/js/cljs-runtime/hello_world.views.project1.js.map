{"version":3,"sources":["hello_world/views/project1.cljs"],"mappings":";AAMA,wCAAA,xCAAME,wFAAYC;AAAlB,AAAA,0FAAA,sDAAA,2CAAA,qDAAA,OAAA,sDAAA,AAAAH,uBAAA,+DAAA,WAAAC,jFAEmBE;AAFnB,AAGuB,OAACC,sBAAOD,MAAM,AAAA,AAAAF;;;AAErC,iDAAA,jDAAMI,0GAAeC;AAArB,AAEI,OAACC,0BAAY,AAACC,cAAIF,KAAK,cAAA,dAACE;;AAG5B,qCAAA,rCAAMC,kFAASH;AAAf,AACI,sDAAA,WAAAI,iBAAAC,3EAACC;AAAD,AAAS,QAAG,SAAAD,TAACE,6BAAgB,CAAAH,mBAAA;GAAUJ;;AAG3C,qCAAA,rCAAMQ;AAAN,AACE,IAAMR,MAAI,gDAAA,hDAACS;AAAX,AACA;AAAA,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,kBAAA,mFAAA,8CAAA,WAAA,mFAGkBb,sCAAWI,oBAC3B,iIAAA,mFAAA,8CAAA,hQAAI,+CAAA,AAAAN,/CAACK,+DAAeC,OAChB,mCAAA,AAAAN,nCAACS,mDAASH;;;AAOlB,wCAAA,xCAAMU;AAAN,AAAA,0FACEF","names":["cljs.core/deref","p1__13253#","hello-world.views.project1/atom-input","value","cljs.core/reset!","hello-world.views.project1/valid-binary?","bin","clojure.set/subset?","cljs.core/set","hello-world.views.project1/bin2dec","p1__13255#","p2__13254#","cljs.core.reduce","js/parseInt","hello-world.views.project1/project","reagent.core.atom","hello-world.views.project1/main-panel"],"sourcesContent":["(ns hello-world.views.project1\n    ( :require \n        [reagent.core :as r]\n        [clojure.set :as set]\n    ))\n\n(defn atom-input [value]\n  [:input {:type \"text\"\n           :value @value\n           :on-change #(reset! value (-> % .-target .-value))}])\n\n(defn valid-binary? [bin]\n    ;; true\n    (set/subset? (set bin) (set \"01\"))\n)\n\n(defn bin2dec [bin]\n    (reduce #(+ (js/parseInt %2) (* %1 2)) bin)\n)\n\n(defn project []\n  (let [bin (r/atom \"12\")]\n  (fn [] \n  [:div\n    [:h1 \"bin2dec\"]\n    [:p \"Binary: \" [atom-input bin] ]\n    (if (valid-binary? @bin)\n        (bin2dec @bin)\n        [:p \"Bad binary rep\"])\n  ]\n  )\n  )\n)\n\n(defn main-panel []\n [project])"]}